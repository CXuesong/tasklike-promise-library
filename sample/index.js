/*! For license information please see index.js.LICENSE.txt */
!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.ts")}({"../node_modules/tslib/tslib.es6.js":function(e,t,r){"use strict";r.r(t),r.d(t,"__extends",(function(){return i})),r.d(t,"__assign",(function(){return o})),r.d(t,"__rest",(function(){return s})),r.d(t,"__decorate",(function(){return a})),r.d(t,"__param",(function(){return c})),r.d(t,"__metadata",(function(){return u})),r.d(t,"__awaiter",(function(){return l})),r.d(t,"__generator",(function(){return f})),r.d(t,"__exportStar",(function(){return d})),r.d(t,"__values",(function(){return p})),r.d(t,"__read",(function(){return m})),r.d(t,"__spread",(function(){return h})),r.d(t,"__spreadArrays",(function(){return y})),r.d(t,"__await",(function(){return v})),r.d(t,"__asyncGenerator",(function(){return b})),r.d(t,"__asyncDelegator",(function(){return _})),r.d(t,"__asyncValues",(function(){return k})),r.d(t,"__makeTemplateObject",(function(){return g})),r.d(t,"__importStar",(function(){return w})),r.d(t,"__importDefault",(function(){return j})),r.d(t,"__classPrivateFieldGet",(function(){return x})),r.d(t,"__classPrivateFieldSet",(function(){return P}));var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return(o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function s(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function a(e,t,r,n){var i,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,r,s):i(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s}function c(e,t){return function(r,n){t(r,n,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))}function f(e,t){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function d(e,t){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return s}function h(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function y(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],s=0,a=o.length;s<a;s++,i++)n[i]=o[s];return n}function v(e){return this instanceof v?(this.v=e,this):new v(e)}function b(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},s("next"),s("throw"),s("return"),n[Symbol.asyncIterator]=function(){return this},n;function s(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||a(e,t)}))})}function a(e,t){try{(r=i[e](t)).value instanceof v?Promise.resolve(r.value.v).then(c,u):l(o[0][2],r)}catch(e){l(o[0][3],e)}var r}function c(e){a("next",e)}function u(e){a("throw",e)}function l(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}function _(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:v(e[n](t)),done:"return"===n}:i?i(t):t}:i}}function k(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=p(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){(function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)})(n,i,(t=e[r](t)).done,t.value)}))}}}function g(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function w(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function j(e){return e&&e.__esModule?e:{default:e}}function x(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function P(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},"../packages/tasklike-promise-library/dist/esm/common.js":function(e,t,r){"use strict";r.r(t),r.d(t,"delay",(function(){return s})),r.d(t,"yielded",(function(){return a})),r.d(t,"fromResolved",(function(){return c})),r.d(t,"fromRejected",(function(){return u})),r.d(t,"fromCancelled",(function(){return l}));var n=r("../packages/tasklike-promise-library/dist/esm/primitives/cancellation.js"),i=r("../packages/tasklike-promise-library/dist/esm/primitives/promiseResolutionSource.js"),o=Promise.resolve();function s(e,t){if(e<0)throw new RangeError("milliseconds (arg#1) should be a non-negative number.");t&&t.throwIfCancellationRequested();var r=new i.PromiseResolutionSource,o=setTimeout((function(){r.tryResolve()}),e);return t&&t.subscribe((function(){clearTimeout(o),r.tryReject(new n.PromiseCancelledError)})),r.promise}function a(){return o}function c(e){return Promise.resolve(e)}function u(e){return Promise.reject(e)}function l(){return Promise.reject(new n.PromiseCancelledError)}},"../packages/tasklike-promise-library/dist/esm/delayedCallbacks.js":function(e,t,r){"use strict";r.r(t),r.d(t,"setTimeoutAsync",(function(){return i})),r.d(t,"requestAnimationFrameAsync",(function(){return o})),r.d(t,"requestIdleCallbackAsync",(function(){return s}));var n=r("../packages/tasklike-promise-library/dist/esm/primitives/index.js");function i(e,t){t&&t.throwIfCancellationRequested();var r,i=new n.PromiseLikeResolutionSource,o=window.setTimeout((function(){r&&r.dispose(),i.tryResolve(o)}),e);return t&&(r=t.subscribe((function(){window.clearTimeout(o),i.tryCancel()}))),i.promiseLike}function o(e){e&&e.throwIfCancellationRequested();var t,r=new n.PromiseLikeResolutionSource,i=window.requestAnimationFrame((function(e){t&&t.dispose(),r.tryResolve({id:i,time:e})}));return e&&(t=e.subscribe((function(){window.cancelAnimationFrame(i),r.tryCancel()}))),r.promiseLike}function s(e,t){t&&t.throwIfCancellationRequested();var r,i=new n.PromiseLikeResolutionSource,o=window.requestIdleCallback((function(e){r&&r.dispose(),i.tryResolve({id:o,deadline:e})}),e);return t&&(r=t.subscribe((function(){window.cancelIdleCallback(o),i.tryCancel()}))),i.promiseLike}},"../packages/tasklike-promise-library/dist/esm/http/browser.js":function(e,t,r){"use strict";r.r(t),r.d(t,"XhrResponse",(function(){return s})),r.d(t,"sendRequest",(function(){return a}));var n=r("../packages/tasklike-promise-library/dist/esm/primitives/index.js"),i=r("../packages/tasklike-promise-library/dist/esm/primitives/cancellation.js"),o=r("../packages/tasklike-promise-library/dist/esm/http/common.js"),s=function(){function e(e){this.xhr=e,this.statusCode=this.xhr.status,this.statusText=this.xhr.statusText,this.isSuccessfulStatusCode=this.xhr.status>=200&&this.xhr.status<=299,console.assert(e)}return e.prototype.getHeaderValue=function(e){return this.xhr.getResponseHeader(e)},e.prototype.getHeaderValues=function(e){var t=this.xhr.getResponseHeader(e);return null==t?null:t.split(",").map((function(e){return e.trimLeft()}))},Object.defineProperty(e.prototype,"body",{get:function(){return this.xhr.response},enumerable:!0,configurable:!0}),e.prototype.ensureSuccessfulStatusCode=function(){if(!this.isSuccessfulStatusCode)throw new o.HttpRequestError("The HTTP response code "+this.statusCode+" indicates failure.")},e}();function a(e,t){t&&t.throwIfCancellationRequested();var r,a=new XMLHttpRequest,c=new n.PromiseLikeResolutionSource;if(null!=e.username||null!=e.password?a.open(e.method,e.url,!0,e.username,e.password):a.open(e.method,e.url),e.timeout&&(a.timeout=e.timeout),e.headers)for(var u in e.headers)if(e.headers.hasOwnProperty(u)){var l=e.headers[u];null!=l&&(l=Array.isArray(l)?l.join(", "):String(l),a.setRequestHeader(u,l))}if(null!=e.responseType){var f=e.responseType;"buffer"===f&&(f="arraybuffer"),a.responseType=f}return null!=e.withCredentials&&(a.withCredentials=e.withCredentials),a.onload=function(){console.assert(4==a.readyState),r&&r.dispose(),c.tryResolve(new s(a))},a.onerror=function(){r&&r.dispose(),c.tryReject(new o.HttpRequestError("An error occurred while sending the HTTP request."))},a.ontimeout=function(){r&&r.dispose(),c.tryReject(new i.PromiseCancelledError("HTTP request timeout has reached."))},r=t&&t.subscribe((function(){c.tryCancel()&&a.abort()})),a.send(e.body),c.promiseLike}},"../packages/tasklike-promise-library/dist/esm/http/common.js":function(e,t,r){"use strict";r.r(t),r.d(t,"HttpRequestError",(function(){return i}));var n=r("../node_modules/tslib/tslib.es6.js"),i=function(e){function t(r,n){var i=e.call(this,null==r?"The HTTP request has failed.":r)||this;return i.inner=n,i.name="HttpRequestError",Object.setPrototypeOf(i,t.prototype),i}return Object(n.__extends)(t,e),t}(Error)},"../packages/tasklike-promise-library/dist/esm/http/index.js":function(e,t,r){"use strict";r.r(t);var n=r("../packages/tasklike-promise-library/dist/esm/http/common.js");r.d(t,"HttpRequestError",(function(){return n.HttpRequestError}));var i=r("../packages/tasklike-promise-library/dist/esm/http/browser.js");r.d(t,"XhrResponse",(function(){return i.XhrResponse})),r.d(t,"sendRequest",(function(){return i.sendRequest}))},"../packages/tasklike-promise-library/dist/esm/index.js":function(e,t,r){"use strict";r.r(t);var n=r("../packages/tasklike-promise-library/dist/esm/common.js");r.d(t,"delay",(function(){return n.delay})),r.d(t,"yielded",(function(){return n.yielded})),r.d(t,"fromResolved",(function(){return n.fromResolved})),r.d(t,"fromRejected",(function(){return n.fromRejected})),r.d(t,"fromCancelled",(function(){return n.fromCancelled}));var i=r("../packages/tasklike-promise-library/dist/esm/primitives/index.js");r.d(t,"PromiseCancelledError",(function(){return i.PromiseCancelledError})),r.d(t,"CancellationTokenSource",(function(){return i.CancellationTokenSource})),r.d(t,"combineDisposable",(function(){return i.combineDisposable})),r.d(t,"setInnerError",(function(){return i.setInnerError})),r.d(t,"AggregateError",(function(){return i.AggregateError})),r.d(t,"EventEmitter",(function(){return i.EventEmitter})),r.d(t,"PromiseResolutionSource",(function(){return i.PromiseResolutionSource})),r.d(t,"PromiseLikeResolutionSource",(function(){return i.PromiseLikeResolutionSource}));var o=r("../packages/tasklike-promise-library/dist/esm/http/index.js");r.d(t,"HttpRequestError",(function(){return o.HttpRequestError})),r.d(t,"XhrResponse",(function(){return o.XhrResponse})),r.d(t,"sendRequest",(function(){return o.sendRequest}));var s=r("../packages/tasklike-promise-library/dist/esm/delayedCallbacks.js");r.d(t,"setTimeoutAsync",(function(){return s.setTimeoutAsync})),r.d(t,"requestAnimationFrameAsync",(function(){return s.requestAnimationFrameAsync})),r.d(t,"requestIdleCallbackAsync",(function(){return s.requestIdleCallbackAsync}))},"../packages/tasklike-promise-library/dist/esm/primitives/cancellation.js":function(e,t,r){"use strict";r.r(t),r.d(t,"PromiseCancelledError",(function(){return s})),r.d(t,"CancellationTokenSource",(function(){return u}));var n=r("../node_modules/tslib/tslib.es6.js"),i=r("../packages/tasklike-promise-library/dist/esm/primitives/eventEmitter.js"),o=r("../packages/tasklike-promise-library/dist/esm/primitives/promiseLikeResolutionSource.js"),s=function(e){function t(r){var n=e.call(this,null==r?"Promise execution has been cancelled.":r)||this;return n.name="PromiseCancelledError",Object.setPrototypeOf(n,t.prototype),n}return Object(n.__extends)(t,e),t}(Error),a=function(){function e(){}return Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return!!this._cancelled},enumerable:!0,configurable:!0}),e.prototype.__int_cancel=function(){this._cancellationEvent&&(this._cancellationEvent.raise(),this._cancellationEvent.clearListeners()),this._cancellationPlrs&&this._cancellationPlrs.tryResolve(),this._cancelled=!0},e.prototype.throwIfCancellationRequested=function(){if(this._cancelled)throw new s},e.prototype.subscribe=function(e){this._cancellationEvent||(this._cancellationEvent=new i.EventEmitter);var t=this._cancellationEvent.addListener(e,!0);return this._cancelled&&(this._cancellationEvent.raise(),this._cancellationEvent.clearListeners()),t},Object.defineProperty(e.prototype,"promiseLike",{get:function(){return this._cancellationPlrs&&(this._cancellationPlrs=new o.PromiseLikeResolutionSource,this._cancelled&&this._cancellationPlrs.tryResolve()),this._cancellationPlrs.promiseLike},enumerable:!0,configurable:!0}),e}(),c=new a;c.__int_cancel();var u=function(){function e(e){null!=e&&this.cancelAfter(e)}return Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return!!this._cancellationToken&&this._cancellationToken.isCancellationRequested},enumerable:!0,configurable:!0}),e.prototype.cancel=function(){this._cancellationToken?this._cancellationToken.__int_cancel():this._cancellationToken=c},e.prototype.cancelAfter=function(e){var t=this;if(e<0)throw new RangeError("delay (arg#1) should be a non-negative number.");0===e?this.cancel():setTimeout((function(){t.cancel()}),e)},Object.defineProperty(e.prototype,"token",{get:function(){return this._cancellationToken||(this._cancellationToken=new a),this._cancellationToken},enumerable:!0,configurable:!0}),e.race=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var n=new e,i=function(){n.cancel()},o=0,s=t;o<s.length;o++){var a=s[o];a&&a.subscribe(i)}return n},e}()},"../packages/tasklike-promise-library/dist/esm/primitives/disposable.js":function(e,t,r){"use strict";function n(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return{dispose:function(){e.forEach((function(e){return e.dispose()}))}}}r.r(t),r.d(t,"combineDisposable",(function(){return n}))},"../packages/tasklike-promise-library/dist/esm/primitives/errors.js":function(e,t,r){"use strict";r.r(t),r.d(t,"setInnerError",(function(){return s})),r.d(t,"AggregateError",(function(){return a}));var n=r("../node_modules/tslib/tslib.es6.js"),i=function(e){function t(r,n){var i=e.call(this)||this;return i.rawValue=r,i.inner=n,i.name="RawValueError",i.getBaseError=o,Object.setPrototypeOf(i,t),i}return Object(n.__extends)(t,e),t}(Error);function o(){for(var e=this;null!=e.inner;)e=e.inner;return e}function s(e,t){return e instanceof Error?(Object.defineProperty(e,"inner",{value:t,writable:!1}),Object.defineProperty(e,"getBaseError",{value:o,writable:!1}),e):new i(e,t)}var a=function(e){function t(r){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];var o=e.call(this)||this;return o.name="RawValueError",Object.setPrototypeOf(o,t),o.innerErrors=n.filter((function(e){return null!=e})),o}return Object(n.__extends)(t,e),t.prototype.forEach=function(e,r){e.call(r,this);for(var n=0,i=this.innerErrors;n<i.length;n++){var o=i[n];e.call(r,o),o instanceof t&&o.forEach(e,r)}},t}(Error)},"../packages/tasklike-promise-library/dist/esm/primitives/eventEmitter.js":function(e,t,r){"use strict";r.r(t),r.d(t,"EventEmitter",(function(){return n}));var n=function(){function e(){}return e.prototype.addListener=function(e,t,r){var n=this,i={prev:this.tail,callback:e.bind(r),isAsync:t};return this.head||(console.assert(!this.tail),this.head=i),this.tail&&(this.tail.next=i),this.tail=i,{dispose:function(){i&&(i.prev?(console.assert(i.prev.next===i),i.prev.next=i.next):(console.assert(n.head===i),n.head=i.next),i.next?(console.assert(i.next.prev===i),i.next.prev=i.prev):(console.assert(n.tail===i),n.tail=i.prev),i=void 0)}}},e.prototype.raise=function(e){for(var t,r=this.head,n=[];r;)n.push([r.callback,!!r.isAsync]),r=r.next;for(var i=0,o=n;i<o.length;i++){var s=o[i],a=s[0];s[1]?(t||(t=Promise.resolve(e)),t.then(a)):a(e)}},e.prototype.clearListeners=function(){this.head=this.tail=void 0},e}()},"../packages/tasklike-promise-library/dist/esm/primitives/index.js":function(e,t,r){"use strict";r.r(t);var n=r("../packages/tasklike-promise-library/dist/esm/primitives/cancellation.js");r.d(t,"PromiseCancelledError",(function(){return n.PromiseCancelledError})),r.d(t,"CancellationTokenSource",(function(){return n.CancellationTokenSource}));var i=r("../packages/tasklike-promise-library/dist/esm/primitives/disposable.js");r.d(t,"combineDisposable",(function(){return i.combineDisposable}));var o=r("../packages/tasklike-promise-library/dist/esm/primitives/errors.js");r.d(t,"setInnerError",(function(){return o.setInnerError})),r.d(t,"AggregateError",(function(){return o.AggregateError}));var s=r("../packages/tasklike-promise-library/dist/esm/primitives/eventEmitter.js");r.d(t,"EventEmitter",(function(){return s.EventEmitter}));var a=r("../packages/tasklike-promise-library/dist/esm/primitives/promiseResolutionSource.js");r.d(t,"PromiseResolutionSource",(function(){return a.PromiseResolutionSource}));var c=r("../packages/tasklike-promise-library/dist/esm/primitives/promiseLikeResolutionSource.js");r.d(t,"PromiseLikeResolutionSource",(function(){return c.PromiseLikeResolutionSource}))},"../packages/tasklike-promise-library/dist/esm/primitives/promiseLikeResolutionSource.js":function(e,t,r){"use strict";r.r(t),r.d(t,"PromiseLikeResolutionSource",(function(){return o}));var n=r("../packages/tasklike-promise-library/dist/esm/primitives/cancellation.js"),i=r("../packages/tasklike-promise-library/dist/esm/primitives/promiseResolutionSource.js"),o=function(){function e(){}return e.prototype._ensurePromiseLikeInitialized=function(){this._promiseLike||(this._promiseLike=new s)},Object.defineProperty(e.prototype,"promiseLike",{get:function(){return this._ensurePromiseLikeInitialized(),this._promiseLike},enumerable:!0,configurable:!0}),e.prototype.tryResolve=function(e){return this._ensurePromiseLikeInitialized(),!this._promiseLike.$__int__settled&&(this._promiseLike.$__int__fulfill(e),!0)},e.prototype.tryCancel=function(){return this._ensurePromiseLikeInitialized(),!this._promiseLike.$__int__settled&&(this._promiseLike.$__int__reject(new n.PromiseCancelledError),!0)},e.prototype.tryReject=function(e){return this._ensurePromiseLikeInitialized(),!this._promiseLike.$__int__settled&&(this._promiseLike.$__int__reject(e),!0)},e}(),s=function(){function e(e,t){var r=this;this._onfulfilled=e,this._onrejected=t,this.fulfillNext=function(e){if(e&&"object"==typeof e&&"function"==typeof e.then)e.then(r.fulfillNext,r.rejectNext);else if(r.asnycPrs&&r.asnycPrs.tryResolve(e),Array.isArray(r.next))for(var t=0,n=r.next;t<n.length;t++){n[t].$__int__fulfill(e)}else if("string"==typeof r.next)return void console.error("Settled PromiseLike should not be resolved furthermore.",r.next);r.next="resolved",r.result=e},this.rejectNext=function(e){if(e&&"object"==typeof e&&"function"==typeof e.then)e.then(r.fulfillNext,r.rejectNext);else if(r.asnycPrs&&r.asnycPrs.tryReject(e),Array.isArray(r.next))for(var t=0,n=r.next;t<n.length;t++){n[t].$__int__reject(e)}else if("string"==typeof r.next)return void console.error("Settled PromisLike should not be rejected furthermore.",r.next);r.next="rejected",r.result=e}}return Object.defineProperty(e.prototype,"$__int__settled",{get:function(){return"string"==typeof this.next},enumerable:!0,configurable:!0}),e.prototype.$__int__fulfill=function(e){if("string"!=typeof this.next)try{if(this._onfulfilled){var t=this._onfulfilled(e);this.fulfillNext(t)}else this.fulfillNext(e)}catch(e){this._onrejected&&this.rejectNext(e)}else console.error("Settled PromiseLike should not be resolved furthermore.",this.next)},e.prototype.$__int__reject=function(e){if("string"!=typeof this.next)try{if(this._onrejected){var t=this._onrejected(e);this.fulfillNext(t)}else this.rejectNext(e)}catch(e){this._onrejected?this.rejectNext(e):console.error("Uncaught SynchronousPromiseLike rejection: %o",e)}else console.error("Settled PromiseLike should not be resolved furthermore.",this.next)},e.prototype.then=function(t,r){var n=new e(t,r);return this.next||(this.next=[]),Array.isArray(this.next)?this.next.push(n):"resolved"===this.next?n.$__int__fulfill(this.result):"rejected"===this.next?n.$__int__reject(this.result):console.error("Invalid state."),n},e.prototype.forceAsync=function(){return this.asnycPrs?this.asnycPrs.promise:"resolved"===this.next?Promise.resolve(this.result):"rejected"===this.next?Promise.reject(this.result):(console.assert(!this.next||Array.isArray(this.next)),this.asnycPrs=new i.PromiseResolutionSource,this.asnycPrs.promise)},e}()},"../packages/tasklike-promise-library/dist/esm/primitives/promiseResolutionSource.js":function(e,t,r){"use strict";r.r(t),r.d(t,"PromiseResolutionSource",(function(){return i}));var n=r("../packages/tasklike-promise-library/dist/esm/primitives/cancellation.js"),i=function(){function e(){}return e.prototype._ensurePromiseInitialized=function(){var e=this;null==this._promise&&(this._promise=new Promise((function(t,r){e._resolve=t,e._reject=r})))},Object.defineProperty(e.prototype,"promise",{get:function(){return this._ensurePromiseInitialized(),this._promise},enumerable:!0,configurable:!0}),e.prototype.tryResolve=function(e){return this._ensurePromiseInitialized(),!!this._resolve&&(this._resolve(e),this._resolve=this._reject=void 0,!0)},e.prototype.tryCancel=function(){return this._ensurePromiseInitialized(),!!this._reject&&(this._reject(new n.PromiseCancelledError),this._resolve=this._reject=void 0,!0)},e.prototype.tryReject=function(e){return this._ensurePromiseInitialized(),!!this._reject&&(this._reject(e),this._resolve=this._reject=void 0,!0)},e}()},"./src/index.ts":function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var s=r("../packages/tasklike-promise-library/dist/esm/index.js"),a=o(r("../packages/tasklike-promise-library/dist/esm/index.js"));function c(e,t){return t?t.querySelector(e):document.querySelector(e)}function u(e){var t=document.createElement("div");return t.classList.add("error"),t.innerText=e&&e.stack||String(e),t}function l(e,t){var r=document.createElement("div");return r.innerText=t,e.appendChild(r),r}function f(e,t,r){return n(this,void 0,void 0,(function(){var n,o,a,l,f,d;return i(this,(function(i){switch(i.label){case 0:n=new s.CancellationTokenSource,o=function(){n.cancel()},a=c(t),(l=r?c(r):null)&&(l.addEventListener("click",o),l.disabled=!1),a.innerText="",i.label=1;case 1:return i.trys.push([1,4,5,6]),(f=e(a,l?n.token:void 0))?[4,f]:[3,3];case 2:i.sent(),i.label=3;case 3:return[3,6];case 4:return d=i.sent(),a.appendChild(u(d)),console.error(d),[3,6];case 5:return l&&(l.removeEventListener("click",o),l.disabled=!0),[7];case 6:return[2]}}))}))}function d(e){l(e,"Caller: Call myAsyncFunction."),function(){n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return l(e,"Callee: Do some work synchronously in myAsyncFunction…"),l(e,"Callee: myAsyncFunction is to yield…"),[4,s.yielded()];case 1:return t.sent(),l(e,"Callee: back from yielded state…"),l(e,"Callee: exiting."),[2]}}))}))}(),l(e,"Caller: We decide don't await for myAsyncFunction."),l(e,"Caller: exiting.")}function p(e,t){return n(this,void 0,void 0,(function(){var r;return i(this,(function(n){switch(n.label){case 0:return r=l(e,"Delay 0ms (SetTimeout(0) + yielded)."),[4,s.delay(0,t)];case 1:return n.sent(),r.innerText+=" Finished.",r=l(e,"Delay 500ms."),[4,s.delay(500,t)];case 2:return n.sent(),r.innerText+=" Finished.",r=l(e,"Delay 1s."),[4,s.delay(1e3,t)];case 3:return n.sent(),r.innerText+=" Finished.",r=l(e,"Delay 2s."),[4,s.delay(2e3,t)];case 4:return n.sent(),r.innerText+=" Finished.",r=l(e,"Delay 3s."),[4,s.delay(3e3,t)];case 5:return n.sent(),r.innerText+=" Finished.",l(e,"----------"),[2]}}))}))}function m(e,t){return n(this,void 0,void 0,(function(){function r(r){return n(this,void 0,void 0,(function(){var n,o,a,c;return i(this,(function(i){switch(i.label){case 0:n=l(e,r.method+" request to "+r.url+"…"),i.label=1;case 1:return i.trys.push([1,3,4,5]),[4,s.sendRequest(r,t)];case 2:return o=i.sent(),n.innerText+=" "+o.statusCode+" "+o.statusText,l(e,"Content-Type: "+o.getHeaderValue("Content-Type")),(a=document.createElement("pre")).classList.add("http-response-body"),a.innerText=o.body,e.appendChild(a),n=l(e,"ensureSuccessfulStatusCode…"),o.ensureSuccessfulStatusCode(),n.innerText+=" Successful.",[3,5];case 3:if((c=i.sent())instanceof s.PromiseCancelledError)throw c;return e.appendChild(u(c)),[3,5];case 4:return l(e,"----------"),[7];case 5:return[2]}}))}))}return i(this,(function(e){switch(e.label){case 0:return[4,r({url:"tsconfig.json?rand="+Math.random(),method:"GET",timeout:2e3})];case 1:return e.sent(),[4,r({url:"tsconfig.json",method:"POST"})];case 2:return e.sent(),[2]}}))}))}function h(e,t){return n(this,void 0,void 0,(function(){var r,n,o,a,c,u,f;return i(this,(function(i){switch(i.label){case 0:t&&t.throwIfCancellationRequested(),l(e,"requestIdleCallbackAsync"),r=l(e,"Requesting…"),n=0,o=0,i.label=1;case 1:return!t||t.isCancellationRequested?[3,3]:[4,s.requestIdleCallbackAsync({timeout:1e3},t)];case 2:return u=i.sent(),f=u.deadline.timeRemaining(),n++,u.deadline.didTimeout&&o++,a=null==a?f:Math.min(f,a),c=null==c?f:Math.max(f,c),r.innerText="Requested: "+n+" times, timed-outs: "+o+", minIdleTime: "+a+", maxIdleTime: "+c,[3,1];case 3:return[2]}}))}))}function y(e,t){return n(this,void 0,void 0,(function(){var r,n,o,a,c,u,f,d,p,m,h,y,v,b,_,k,g;return i(this,(function(i){switch(i.label){case 0:return t&&t.throwIfCancellationRequested(),l(e,"requestAnimationFrameAsync"),r=l(e,"Requesting…"),n=l(e,"This is <DIV>."),30,(o=document.createElement("button")).innerText="ball",o.style.borderRadius="15px",o.style.position="absolute",o.style.width=o.style.height="30px",n.classList.add("canvas"),n.appendChild(o),a=performance.now(),c=a,u=0,f=0,d=200,p=200,0,m=200,h=0,[4,s.requestAnimationFrameAsync(t)];case 1:i.sent(),n.scrollIntoView(),i.label=2;case 2:return t&&t.isCancellationRequested?[3,4]:[4,s.requestAnimationFrameAsync(t)];case 3:return y=i.sent(),v=y.time-c,b=n.clientWidth,_=n.clientHeight,g=f+p*(v/1e3),(k=u+d*(v/1e3))<0||k+o.offsetWidth>b?(d=-d*(.2*Math.random()+.8),u=k<0?0:b-o.offsetWidth):(u=k,o.style.left=k+"px"),g<0||g+o.offsetHeight>_?(p=-p*(.2*Math.random()+.8),f=g<0?0:_-o.offsetHeight):(f=g,p+=m*(v/1e3),o.style.top=g+"px"),c=y.time,++h>30&&(r.innerText="Frames: "+h+", time: "+((y.time-a)/1e3).toFixed(2)+" sec., FPS: "+(1e3*h/(y.time-a)).toFixed(2)+"."),[3,2];case 4:return[2]}}))}))}c("#tpl-yielded-run").addEventListener("click",(function(){return f(d,"#tpl-yielded-panel")})),c("#tpl-delay-run").addEventListener("click",(function(){return f(p,"#tpl-delay-panel","#tpl-delay-cancel")})),c("#tpl-sendrequest-run").addEventListener("click",(function(){return f(m,"#tpl-sendrequest-panel","#tpl-sendrequest-cancel")})),c("#tpl-requesticb-run").addEventListener("click",(function(){return f(h,"#tpl-requesticb-panel","#tpl-requesticb-cancel")})),c("#tpl-requestaf-run").addEventListener("click",(function(){return f(y,"#tpl-requestaf-panel","#tpl-requestaf-cancel")})),window.TPL=a}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,