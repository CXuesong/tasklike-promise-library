!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/index.ts")}({"../packages/tasklike-promise-library/dist/cancellation.js":
/*!*****************************************************************!*\
  !*** ../packages/tasklike-promise-library/dist/cancellation.js ***!
  \*****************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(n){var r=e.call(this,null==n?"Promise execution has been cancelled.":n)||this;return r.name="PromiseCancelledError",Object.setPrototypeOf(r,t.prototype),r}return i(t,e),t}(Error);t.PromiseCancelledError=o;var s=function(){function e(){}return Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return!!this._cancellationPromise&&!this._notifyCancel},enumerable:!0,configurable:!0}),e.prototype._ensurePromiseInitialized=function(){var e=this;this._cancellationPromise||(this._cancellationPromise=new Promise(function(t,n){e._notifyCancel=t}))},e.prototype.__int_cancel=function(){this._ensurePromiseInitialized(),this._notifyCancel&&(this._notifyCancel(),this._notifyCancel=void 0)},e.prototype.throwIfCancellationRequested=function(){if(this._cancellationPromise&&!this._notifyCancel)throw new o},e.prototype.subscribe=function(e){this._ensurePromiseInitialized(),this._cancellationPromise.then(e)},Object.defineProperty(e.prototype,"promise",{get:function(){return this._ensurePromiseInitialized(),this._cancellationPromise},enumerable:!0,configurable:!0}),e}(),a=new s;a.__int_cancel();var c=function(){function e(e){null!=e&&this.cancelAfter(e)}return Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return!!this._cancellationToken&&this._cancellationToken.isCancellationRequested},enumerable:!0,configurable:!0}),e.prototype.cancel=function(){this._cancellationToken?this._cancellationToken.__int_cancel():this._cancellationToken=a},e.prototype.cancelAfter=function(e){var t=this;if(e<0)throw new RangeError("delay (arg#1) should be a non-negative number.");0===e?this.cancel():setTimeout(function(){t.cancel()},e)},Object.defineProperty(e.prototype,"token",{get:function(){return this._cancellationToken||(this._cancellationToken=new s),this._cancellationToken},enumerable:!0,configurable:!0}),e.race=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=new e,i=function(){r.cancel()},o=0,s=t;o<s.length;o++){var a=s[o];a&&a.subscribe(i)}return r},e}();t.CancellationTokenSource=c},"../packages/tasklike-promise-library/dist/common.js":
/*!***********************************************************!*\
  !*** ../packages/tasklike-promise-library/dist/common.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(/*! ./cancellation */"../packages/tasklike-promise-library/dist/cancellation.js"),i=n(/*! ./promiseResolutionSource */"../packages/tasklike-promise-library/dist/promiseResolutionSource.js"),o=Promise.resolve();t.delay=function(e,t){if(e<0)throw new RangeError("milliseconds (arg#1) should be a non-negative number.");t&&t.throwIfCancellationRequested();var n=new i.PromiseResolutionSource,o=setTimeout(function(){n.tryResolve()},e);return t&&t.subscribe(function(){clearTimeout(o),n.tryReject(new r.PromiseCancelledError)}),n.promise},t.yielded=function(){return o},t.fromResolved=function(e){return Promise.resolve(e)},t.fromRejected=function(e){return Promise.reject(e)},t.fromCancelled=function(){return Promise.reject(new r.PromiseCancelledError)}},"../packages/tasklike-promise-library/dist/http.js":
/*!*********************************************************!*\
  !*** ../packages/tasklike-promise-library/dist/http.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(/*! ./cancellation */"../packages/tasklike-promise-library/dist/cancellation.js"),s=n(/*! ./promiseResolutionSource */"../packages/tasklike-promise-library/dist/promiseResolutionSource.js"),a=function(e){function t(n){var r=e.call(this,null==n?"The HTTP request has failed.":n)||this;return r.name="HttpRequestError",Object.setPrototypeOf(r,t.prototype),r}return i(t,e),t}(Error);t.HttpRequestError=a;var c=function(){function e(e){this.xhr=e,this.statusCode=this.xhr.status,this.statusText=this.xhr.statusText,this.isSuccessfulStatusCode=this.xhr.status>=200&&this.xhr.status<=299,console.assert(e)}return e.prototype.ensureSuccessfulStatusCode=function(){if(!this.isSuccessfulStatusCode)throw new a("The HTTP response code "+this.statusCode+" indicates failure.")},e}();t.sendRequest=function(e,t){t&&t.throwIfCancellationRequested();var n=new XMLHttpRequest,r=new s.PromiseResolutionSource;if(null!=e.username||null!=e.password?n.open(e.method,e.url,!0,e.username,e.password):n.open(e.method,e.url),e.timeout&&(n.timeout=e.timeout),e.headers)for(var i in e.headers)Object.prototype.hasOwnProperty.call(e.headers,i)&&n.setRequestHeader(i,e.headers[i]);return null!=e.responseType&&(n.responseType=e.responseType),null!=e.withCredentials&&(n.withCredentials=e.withCredentials),n.onload=function(){console.assert(4==n.readyState),r.tryResolve(new c(n))},n.onerror=function(){r.tryReject(new a("An error occurred while sending the HTTP request."))},n.ontimeout=function(){r.tryReject(new o.PromiseCancelledError("HTTP request timeout has reached."))},t&&t.subscribe(function(){r.tryCancel()&&n.abort()}),n.send(e.body),r.promise}},"../packages/tasklike-promise-library/dist/index.js":
/*!**********************************************************!*\
  !*** ../packages/tasklike-promise-library/dist/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(/*! ./common */"../packages/tasklike-promise-library/dist/common.js")),r(n(/*! ./cancellation */"../packages/tasklike-promise-library/dist/cancellation.js")),r(n(/*! ./http */"../packages/tasklike-promise-library/dist/http.js")),r(n(/*! ./promiseResolutionSource */"../packages/tasklike-promise-library/dist/promiseResolutionSource.js"))},"../packages/tasklike-promise-library/dist/promiseResolutionSource.js":
/*!****************************************************************************!*\
  !*** ../packages/tasklike-promise-library/dist/promiseResolutionSource.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(/*! ./cancellation */"../packages/tasklike-promise-library/dist/cancellation.js"),i=function(){function e(){}return e.prototype._ensurePromiseInitialized=function(){var e=this;null==this._promise&&(this._promise=new Promise(function(t,n){e._resolve=t,e._reject=n}))},Object.defineProperty(e.prototype,"promise",{get:function(){return this._ensurePromiseInitialized(),this._promise},enumerable:!0,configurable:!0}),e.prototype.tryResolve=function(e){return this._ensurePromiseInitialized(),!!this._resolve&&(this._resolve(e),this._resolve=this._reject=void 0,!0)},e.prototype.tryCancel=function(){return this._ensurePromiseInitialized(),!!this._reject&&(this._reject(new r.PromiseCancelledError),this._resolve=this._reject=void 0,!0)},e.prototype.tryReject=function(e){return this._ensurePromiseInitialized(),!!this._reject&&(this._reject(e),this._resolve=this._reject=void 0,!0)},e}();t.PromiseResolutionSource=i},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(s,a)}c((r=r.apply(e,t||[])).next())})},i=this&&this.__generator||function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var s=n(/*! tasklike-promise-library */"../packages/tasklike-promise-library/dist/index.js"),a=o(n(/*! tasklike-promise-library */"../packages/tasklike-promise-library/dist/index.js"));function c(e,t){return t?t.querySelector(e):document.querySelector(e)}function l(e){var t=document.createElement("div");return t.classList.add("error"),t.innerText=e&&e.stack||String(e),t}function u(e,t){var n=document.createElement("div");return n.innerText=t,e.appendChild(n),n}function d(e,t,n){return r(this,void 0,void 0,function(){var r,o,a,u,d,f;return i(this,function(i){switch(i.label){case 0:r=new s.CancellationTokenSource,o=function(){r.cancel()},a=c(t),(u=n?c(n):null)&&(u.addEventListener("click",o),u.disabled=!1),a.innerText="",i.label=1;case 1:return i.trys.push([1,4,5,6]),(d=e(a,u?r.token:void 0))?[4,d]:[3,3];case 2:i.sent(),i.label=3;case 3:return[3,6];case 4:return f=i.sent(),a.appendChild(l(f)),[3,6];case 5:return u&&(u.removeEventListener("click",o),u.disabled=!0),[7];case 6:return[2]}})})}function f(e){u(e,"Caller: Call myAsyncFunction."),function(){r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return u(e,"Callee: Do some work synchronously in myAsyncFunction…"),u(e,"Callee: myAsyncFunction is to yield…"),[4,s.yielded()];case 1:return t.sent(),u(e,"Callee: back from yielded state…"),u(e,"Callee: exiting."),[2]}})})}(),u(e,"Caller: We decide don't await for myAsyncFunction."),u(e,"Caller: exiting.")}function p(e,t){return r(this,void 0,void 0,function(){var n;return i(this,function(r){switch(r.label){case 0:return n=u(e,"Delay 0ms (SetTimeout(0) + yielded)."),[4,s.delay(0,t)];case 1:return r.sent(),n.innerText+=" Finished.",n=u(e,"Delay 500ms."),[4,s.delay(500,t)];case 2:return r.sent(),n.innerText+=" Finished.",n=u(e,"Delay 1s."),[4,s.delay(1e3,t)];case 3:return r.sent(),n.innerText+=" Finished.",n=u(e,"Delay 2s."),[4,s.delay(2e3,t)];case 4:return r.sent(),n.innerText+=" Finished.",n=u(e,"Delay 3s."),[4,s.delay(3e3,t)];case 5:return r.sent(),n.innerText+=" Finished.",u(e,"----------"),[2]}})})}function h(e,t){return r(this,void 0,void 0,function(){function n(n){return r(this,void 0,void 0,function(){var r,o,a,c;return i(this,function(i){switch(i.label){case 0:r=u(e,n.method+" request to "+n.url+"…"),i.label=1;case 1:return i.trys.push([1,3,4,5]),[4,s.sendRequest(n,t)];case 2:return o=i.sent(),r.innerText+=" "+o.statusCode+" "+o.statusText,u(e,"Content-Type: "+o.xhr.getResponseHeader("Content-Type")),(a=document.createElement("pre")).classList.add("http-response-body"),a.innerText=o.xhr.responseText,e.appendChild(a),r=u(e,"ensureSuccessfulStatusCode…"),o.ensureSuccessfulStatusCode(),r.innerText+=" Successful.",[3,5];case 3:if((c=i.sent())instanceof s.PromiseCancelledError)throw console.assert(t&&t.isCancellationRequested),c;return e.appendChild(l(c)),[3,5];case 4:return u(e,"----------"),[7];case 5:return[2]}})})}return i(this,function(e){switch(e.label){case 0:return[4,n({url:"/tsconfig.json",method:"GET",timeout:2e3})];case 1:return e.sent(),[4,n({url:"/tsconfig.json",method:"POST"})];case 2:return e.sent(),[2]}})})}c("#tpl-yielded-run").addEventListener("click",function(){return d(f,"#tpl-yielded-panel")}),c("#tpl-delay-run").addEventListener("click",function(){return d(p,"#tpl-delay-panel","#tpl-delay-cancel")}),c("#tpl-sendrequest-run").addEventListener("click",function(){return d(h,"#tpl-sendrequest-panel","#tpl-sendrequest-cancel")}),window.TPL=a}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,