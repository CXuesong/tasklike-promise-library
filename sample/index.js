/*! For license information please see index.js.LICENSE.txt */
!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/index.ts")}({"../packages/tasklike-promise-library/dist/common.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("../packages/tasklike-promise-library/dist/primitives/cancellation.js"),i=r("../packages/tasklike-promise-library/dist/primitives/promiseResolutionSource.js"),s=Promise.resolve();t.delay=function(e,t){if(e<0)throw new RangeError("milliseconds (arg#1) should be a non-negative number.");t&&t.throwIfCancellationRequested();var r=new i.PromiseResolutionSource,s=setTimeout((function(){r.tryResolve()}),e);return t&&t.subscribe((function(){clearTimeout(s),r.tryReject(new n.PromiseCancelledError)})),r.promise},t.yielded=function(){return s},t.fromResolved=function(e){return Promise.resolve(e)},t.fromRejected=function(e){return Promise.reject(e)},t.fromCancelled=function(){return Promise.reject(new n.PromiseCancelledError)}},"../packages/tasklike-promise-library/dist/delayedCallbacks.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("../packages/tasklike-promise-library/dist/primitives/index.js");t.setTimeoutAsync=function(e,t){t&&t.throwIfCancellationRequested();var r,i=new n.PromiseLikeResolutionSource,s=window.setTimeout((function(){r&&r.dispose(),i.tryResolve(s)}),e);return t&&(r=t.subscribe((function(){window.clearTimeout(s),i.tryCancel()}))),i.promiseLike},t.requestAnimationFrameAsync=function(e){e&&e.throwIfCancellationRequested();var t,r=new n.PromiseLikeResolutionSource,i=window.requestAnimationFrame((function(e){t&&t.dispose(),r.tryResolve({id:i,time:e})}));return e&&(t=e.subscribe((function(){window.cancelAnimationFrame(i),r.tryCancel()}))),r.promiseLike},t.requestIdleCallbackAsync=function(e,t){t&&t.throwIfCancellationRequested();var r,i=new n.PromiseLikeResolutionSource,s=window.requestIdleCallback((function(e){r&&r.dispose(),i.tryResolve({id:s,deadline:e})}),e);return t&&(r=t.subscribe((function(){window.cancelIdleCallback(s),i.tryCancel()}))),i.promiseLike}},"../packages/tasklike-promise-library/dist/facades/browser/http.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("../packages/tasklike-promise-library/dist/primitives/index.js"),i=r("../packages/tasklike-promise-library/dist/primitives/cancellation.js"),s=r("../packages/tasklike-promise-library/dist/facades/common/http.js"),o=function(){function e(e){this.xhr=e,this.statusCode=this.xhr.status,this.statusText=this.xhr.statusText,this.isSuccessfulStatusCode=this.xhr.status>=200&&this.xhr.status<=299,console.assert(e)}return e.prototype.getHeaderValue=function(e){return this.xhr.getResponseHeader(e)},e.prototype.getHeaderValues=function(e){var t=this.xhr.getResponseHeader(e);return null==t?null:t.split(",").map((function(e){return e.trimLeft()}))},Object.defineProperty(e.prototype,"body",{get:function(){return this.xhr.response},enumerable:!0,configurable:!0}),e.prototype.ensureSuccessfulStatusCode=function(){if(!this.isSuccessfulStatusCode)throw new s.HttpRequestError("The HTTP response code "+this.statusCode+" indicates failure.")},e}();t.XhrResponse=o,t.sendRequest=function(e,t){t&&t.throwIfCancellationRequested();var r,a=new XMLHttpRequest,l=new n.PromiseLikeResolutionSource;if(null!=e.username||null!=e.password?a.open(e.method,e.url,!0,e.username,e.password):a.open(e.method,e.url),e.timeout&&(a.timeout=e.timeout),e.headers)for(var c in e.headers)if(e.headers.hasOwnProperty(c)){var u=e.headers[c];null!=u&&(u=Array.isArray(u)?u.join(", "):String(u),a.setRequestHeader(c,u))}if(null!=e.responseType){var p=e.responseType;"buffer"===p&&(p="arraybuffer"),a.responseType=p}return null!=e.withCredentials&&(a.withCredentials=e.withCredentials),a.onload=function(){console.assert(4==a.readyState),r&&r.dispose(),l.tryResolve(new o(a))},a.onerror=function(){r&&r.dispose(),l.tryReject(new s.HttpRequestError("An error occurred while sending the HTTP request."))},a.ontimeout=function(){r&&r.dispose(),l.tryReject(new i.PromiseCancelledError("HTTP request timeout has reached."))},r=t&&t.subscribe((function(){l.tryCancel()&&a.abort()})),a.send(e.body),l.promiseLike}},"../packages/tasklike-promise-library/dist/facades/common/http.js":function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(r,n){var i=e.call(this,null==r?"The HTTP request has failed.":r)||this;return i.inner=n,i.name="HttpRequestError",Object.setPrototypeOf(i,t.prototype),i}return i(t,e),t}(Error);t.HttpRequestError=s},"../packages/tasklike-promise-library/dist/http.js":function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r("../packages/tasklike-promise-library/dist/facades/common/http.js")),n(r("../packages/tasklike-promise-library/dist/facades/browser/http.js"))},"../packages/tasklike-promise-library/dist/index.js":function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r("../packages/tasklike-promise-library/dist/common.js")),n(r("../packages/tasklike-promise-library/dist/primitives/index.js")),n(r("../packages/tasklike-promise-library/dist/http.js")),n(r("../packages/tasklike-promise-library/dist/delayedCallbacks.js"))},"../packages/tasklike-promise-library/dist/primitives/cancellation.js":function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var s=r("../packages/tasklike-promise-library/dist/primitives/eventEmitter.js"),o=r("../packages/tasklike-promise-library/dist/primitives/promiseLikeResolutionSource.js"),a=function(e){function t(r){var n=e.call(this,null==r?"Promise execution has been cancelled.":r)||this;return n.name="PromiseCancelledError",Object.setPrototypeOf(n,t.prototype),n}return i(t,e),t}(Error);t.PromiseCancelledError=a;var l=function(){function e(){}return Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return!!this._cancelled},enumerable:!0,configurable:!0}),e.prototype.__int_cancel=function(){this._cancellationEvent&&(this._cancellationEvent.raise(),this._cancellationEvent.clearListeners()),this._cancellationPlrs&&this._cancellationPlrs.tryResolve(),this._cancelled=!0},e.prototype.throwIfCancellationRequested=function(){if(this._cancelled)throw new a},e.prototype.subscribe=function(e){this._cancellationEvent||(this._cancellationEvent=new s.EventEmitter);var t=this._cancellationEvent.addListener(e,!0);return this._cancelled&&(this._cancellationEvent.raise(),this._cancellationEvent.clearListeners()),t},Object.defineProperty(e.prototype,"promiseLike",{get:function(){return this._cancellationPlrs&&(this._cancellationPlrs=new o.PromiseLikeResolutionSource,this._cancelled&&this._cancellationPlrs.tryResolve()),this._cancellationPlrs.promiseLike},enumerable:!0,configurable:!0}),e}(),c=new l;c.__int_cancel();var u=function(){function e(e){null!=e&&this.cancelAfter(e)}return Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return!!this._cancellationToken&&this._cancellationToken.isCancellationRequested},enumerable:!0,configurable:!0}),e.prototype.cancel=function(){this._cancellationToken?this._cancellationToken.__int_cancel():this._cancellationToken=c},e.prototype.cancelAfter=function(e){var t=this;if(e<0)throw new RangeError("delay (arg#1) should be a non-negative number.");0===e?this.cancel():setTimeout((function(){t.cancel()}),e)},Object.defineProperty(e.prototype,"token",{get:function(){return this._cancellationToken||(this._cancellationToken=new l),this._cancellationToken},enumerable:!0,configurable:!0}),e.race=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var n=new e,i=function(){n.cancel()},s=0,o=t;s<o.length;s++){var a=o[s];a&&a.subscribe(i)}return n},e}();t.CancellationTokenSource=u},"../packages/tasklike-promise-library/dist/primitives/disposable.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.combineDisposable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return{dispose:function(){e.forEach((function(e){return e.dispose()}))}}}},"../packages/tasklike-promise-library/dist/primitives/errors.js":function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(r,n){var i=e.call(this)||this;return i.rawValue=r,i.inner=n,i.name="RawValueError",i.getBaseError=o,Object.setPrototypeOf(i,t),i}return i(t,e),t}(Error);function o(){for(var e=this;null!=e.inner;)e=e.inner;return e}t.setInnerError=function(e,t){return e instanceof Error?(Object.defineProperty(e,"inner",{value:t,writable:!1}),Object.defineProperty(e,"getBaseError",{value:o,writable:!1}),e):new s(e,t)};var a=function(e){function t(r){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];var s=e.call(this)||this;return s.name="RawValueError",Object.setPrototypeOf(s,t),s.innerErrors=n.filter((function(e){return null!=e})),s}return i(t,e),t.prototype.forEach=function(e,r){e.call(r,this);for(var n=0,i=this.innerErrors;n<i.length;n++){var s=i[n];e.call(r,s),s instanceof t&&s.forEach(e,r)}},t}(Error);t.AggregateError=a},"../packages/tasklike-promise-library/dist/primitives/eventEmitter.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.addListener=function(e,t,r){var n=this,i={prev:this.tail,callback:e.bind(r),isAsync:t};return this.head||(console.assert(!this.tail),this.head=i),this.tail&&(this.tail.next=i),this.tail=i,{dispose:function(){i&&(i.prev?(console.assert(i.prev.next===i),i.prev.next=i.next):(console.assert(n.head===i),n.head=i.next),i.next?(console.assert(i.next.prev===i),i.next.prev=i.prev):(console.assert(n.tail===i),n.tail=i.prev),i=void 0)}}},e.prototype.raise=function(e){for(var t,r=this.head,n=[];r;)n.push([r.callback,!!r.isAsync]),r=r.next;for(var i=0,s=n;i<s.length;i++){var o=s[i],a=o[0];o[1]?(t||(t=Promise.resolve(e)),t.then(a)):a(e)}},e.prototype.clearListeners=function(){this.head=this.tail=void 0},e}();t.EventEmitter=n},"../packages/tasklike-promise-library/dist/primitives/index.js":function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r("../packages/tasklike-promise-library/dist/primitives/cancellation.js")),n(r("../packages/tasklike-promise-library/dist/primitives/disposable.js")),n(r("../packages/tasklike-promise-library/dist/primitives/errors.js")),n(r("../packages/tasklike-promise-library/dist/primitives/eventEmitter.js")),n(r("../packages/tasklike-promise-library/dist/primitives/promiseResolutionSource.js")),n(r("../packages/tasklike-promise-library/dist/primitives/promiseLikeResolutionSource.js"))},"../packages/tasklike-promise-library/dist/primitives/promiseLikeResolutionSource.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("../packages/tasklike-promise-library/dist/primitives/cancellation.js"),i=r("../packages/tasklike-promise-library/dist/primitives/promiseResolutionSource.js"),s=function(){function e(){}return e.prototype._ensurePromiseLikeInitialized=function(){this._promiseLike||(this._promiseLike=new o)},Object.defineProperty(e.prototype,"promiseLike",{get:function(){return this._ensurePromiseLikeInitialized(),this._promiseLike},enumerable:!0,configurable:!0}),e.prototype.tryResolve=function(e){return this._ensurePromiseLikeInitialized(),!this._promiseLike.$__int__settled&&(this._promiseLike.$__int__fulfill(e),!0)},e.prototype.tryCancel=function(){return this._ensurePromiseLikeInitialized(),!this._promiseLike.$__int__settled&&(this._promiseLike.$__int__reject(new n.PromiseCancelledError),!0)},e.prototype.tryReject=function(e){return this._ensurePromiseLikeInitialized(),!this._promiseLike.$__int__settled&&(this._promiseLike.$__int__reject(e),!0)},e}();t.PromiseLikeResolutionSource=s;var o=function(){function e(e,t){var r=this;this._onfulfilled=e,this._onrejected=t,this.fulfillNext=function(e){if(e&&"object"==typeof e&&"function"==typeof e.then)e.then(r.fulfillNext,r.rejectNext);else if(r.asnycPrs&&r.asnycPrs.tryResolve(e),Array.isArray(r.next))for(var t=0,n=r.next;t<n.length;t++){n[t].$__int__fulfill(e)}else if("string"==typeof r.next)return void console.error("Settled PromiseLike should not be resolved furthermore.",r.next);r.next="resolved",r.result=e},this.rejectNext=function(e){if(e&&"object"==typeof e&&"function"==typeof e.then)e.then(r.fulfillNext,r.rejectNext);else if(r.asnycPrs&&r.asnycPrs.tryReject(e),Array.isArray(r.next))for(var t=0,n=r.next;t<n.length;t++){n[t].$__int__reject(e)}else if("string"==typeof r.next)return void console.error("Settled PromisLike should not be rejected furthermore.",r.next);r.next="rejected",r.result=e}}return Object.defineProperty(e.prototype,"$__int__settled",{get:function(){return"string"==typeof this.next},enumerable:!0,configurable:!0}),e.prototype.$__int__fulfill=function(e){if("string"!=typeof this.next)try{if(this._onfulfilled){var t=this._onfulfilled(e);this.fulfillNext(t)}else this.fulfillNext(e)}catch(e){this._onrejected&&this.rejectNext(e)}else console.error("Settled PromiseLike should not be resolved furthermore.",this.next)},e.prototype.$__int__reject=function(e){if("string"!=typeof this.next)try{if(this._onrejected){var t=this._onrejected(e);this.fulfillNext(t)}else this.rejectNext(e)}catch(e){this._onrejected?this.rejectNext(e):console.error("Uncaught SynchronousPromiseLike rejection: %o",e)}else console.error("Settled PromiseLike should not be resolved furthermore.",this.next)},e.prototype.then=function(t,r){var n=new e(t,r);return this.next||(this.next=[]),Array.isArray(this.next)?this.next.push(n):"resolved"===this.next?n.$__int__fulfill(this.result):"rejected"===this.next?n.$__int__reject(this.result):console.error("Invalid state."),n},e.prototype.forceAsync=function(){return this.asnycPrs?this.asnycPrs.promise:"resolved"===this.next?Promise.resolve(this.result):"rejected"===this.next?Promise.reject(this.result):(console.assert(!this.next||Array.isArray(this.next)),this.asnycPrs=new i.PromiseResolutionSource,this.asnycPrs.promise)},e}()},"../packages/tasklike-promise-library/dist/primitives/promiseResolutionSource.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("../packages/tasklike-promise-library/dist/primitives/cancellation.js"),i=function(){function e(){}return e.prototype._ensurePromiseInitialized=function(){var e=this;null==this._promise&&(this._promise=new Promise((function(t,r){e._resolve=t,e._reject=r})))},Object.defineProperty(e.prototype,"promise",{get:function(){return this._ensurePromiseInitialized(),this._promise},enumerable:!0,configurable:!0}),e.prototype.tryResolve=function(e){return this._ensurePromiseInitialized(),!!this._resolve&&(this._resolve(e),this._resolve=this._reject=void 0,!0)},e.prototype.tryCancel=function(){return this._ensurePromiseInitialized(),!!this._reject&&(this._reject(new n.PromiseCancelledError),this._resolve=this._reject=void 0,!0)},e.prototype.tryReject=function(e){return this._ensurePromiseInitialized(),!!this._reject&&(this._reject(e),this._resolve=this._reject=void 0,!0)},e}();t.PromiseResolutionSource=i},"./src/index.ts":function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{l(n.next(e))}catch(e){s(e)}}function a(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}l((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=r("../packages/tasklike-promise-library/dist/index.js"),a=s(r("../packages/tasklike-promise-library/dist/index.js"));function l(e,t){return t?t.querySelector(e):document.querySelector(e)}function c(e){var t=document.createElement("div");return t.classList.add("error"),t.innerText=e&&e.stack||String(e),t}function u(e,t){var r=document.createElement("div");return r.innerText=t,e.appendChild(r),r}function p(e,t,r){return n(this,void 0,void 0,(function(){var n,s,a,u,p,d;return i(this,(function(i){switch(i.label){case 0:n=new o.CancellationTokenSource,s=function(){n.cancel()},a=l(t),(u=r?l(r):null)&&(u.addEventListener("click",s),u.disabled=!1),a.innerText="",i.label=1;case 1:return i.trys.push([1,4,5,6]),(p=e(a,u?n.token:void 0))?[4,p]:[3,3];case 2:i.sent(),i.label=3;case 3:return[3,6];case 4:return d=i.sent(),a.appendChild(c(d)),console.error(d),[3,6];case 5:return u&&(u.removeEventListener("click",s),u.disabled=!0),[7];case 6:return[2]}}))}))}function d(e){u(e,"Caller: Call myAsyncFunction."),function(){n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return u(e,"Callee: Do some work synchronously in myAsyncFunction…"),u(e,"Callee: myAsyncFunction is to yield…"),[4,o.yielded()];case 1:return t.sent(),u(e,"Callee: back from yielded state…"),u(e,"Callee: exiting."),[2]}}))}))}(),u(e,"Caller: We decide don't await for myAsyncFunction."),u(e,"Caller: exiting.")}function f(e,t){return n(this,void 0,void 0,(function(){var r;return i(this,(function(n){switch(n.label){case 0:return r=u(e,"Delay 0ms (SetTimeout(0) + yielded)."),[4,o.delay(0,t)];case 1:return n.sent(),r.innerText+=" Finished.",r=u(e,"Delay 500ms."),[4,o.delay(500,t)];case 2:return n.sent(),r.innerText+=" Finished.",r=u(e,"Delay 1s."),[4,o.delay(1e3,t)];case 3:return n.sent(),r.innerText+=" Finished.",r=u(e,"Delay 2s."),[4,o.delay(2e3,t)];case 4:return n.sent(),r.innerText+=" Finished.",r=u(e,"Delay 3s."),[4,o.delay(3e3,t)];case 5:return n.sent(),r.innerText+=" Finished.",u(e,"----------"),[2]}}))}))}function h(e,t){return n(this,void 0,void 0,(function(){function r(r){return n(this,void 0,void 0,(function(){var n,s,a,l;return i(this,(function(i){switch(i.label){case 0:n=u(e,r.method+" request to "+r.url+"…"),i.label=1;case 1:return i.trys.push([1,3,4,5]),[4,o.sendRequest(r,t)];case 2:return s=i.sent(),n.innerText+=" "+s.statusCode+" "+s.statusText,u(e,"Content-Type: "+s.getHeaderValue("Content-Type")),(a=document.createElement("pre")).classList.add("http-response-body"),a.innerText=s.body,e.appendChild(a),n=u(e,"ensureSuccessfulStatusCode…"),s.ensureSuccessfulStatusCode(),n.innerText+=" Successful.",[3,5];case 3:if((l=i.sent())instanceof o.PromiseCancelledError)throw l;return e.appendChild(c(l)),[3,5];case 4:return u(e,"----------"),[7];case 5:return[2]}}))}))}return i(this,(function(e){switch(e.label){case 0:return[4,r({url:"tsconfig.json?rand="+Math.random(),method:"GET",timeout:2e3})];case 1:return e.sent(),[4,r({url:"tsconfig.json",method:"POST"})];case 2:return e.sent(),[2]}}))}))}function y(e,t){return n(this,void 0,void 0,(function(){var r,n,s,a,l,c,p;return i(this,(function(i){switch(i.label){case 0:t&&t.throwIfCancellationRequested(),u(e,"requestIdleCallbackAsync"),r=u(e,"Requesting…"),n=0,s=0,i.label=1;case 1:return!t||t.isCancellationRequested?[3,3]:[4,o.requestIdleCallbackAsync({timeout:1e3},t)];case 2:return c=i.sent(),p=c.deadline.timeRemaining(),n++,c.deadline.didTimeout&&s++,a=null==a?p:Math.min(p,a),l=null==l?p:Math.max(p,l),r.innerText="Requested: "+n+" times, timed-outs: "+s+", minIdleTime: "+a+", maxIdleTime: "+l,[3,1];case 3:return[2]}}))}))}function m(e,t){return n(this,void 0,void 0,(function(){var r,n,s,a,l,c,p,d,f,h,y,m,v,_,b,k,j;return i(this,(function(i){switch(i.label){case 0:return t&&t.throwIfCancellationRequested(),u(e,"requestAnimationFrameAsync"),r=u(e,"Requesting…"),n=u(e,"This is <DIV>."),30,(s=document.createElement("button")).innerText="ball",s.style.borderRadius="15px",s.style.position="absolute",s.style.width=s.style.height="30px",n.classList.add("canvas"),n.appendChild(s),a=performance.now(),l=a,c=0,p=0,d=200,f=200,0,h=200,y=0,[4,o.requestAnimationFrameAsync(t)];case 1:i.sent(),n.scrollIntoView(),i.label=2;case 2:return t&&t.isCancellationRequested?[3,4]:[4,o.requestAnimationFrameAsync(t)];case 3:return m=i.sent(),v=m.time-l,_=n.clientWidth,b=n.clientHeight,j=p+f*(v/1e3),(k=c+d*(v/1e3))<0||k+s.offsetWidth>_?(d=-d*(.2*Math.random()+.8),c=k<0?0:_-s.offsetWidth):(c=k,s.style.left=k+"px"),j<0||j+s.offsetHeight>b?(f=-f*(.2*Math.random()+.8),p=j<0?0:b-s.offsetHeight):(p=j,f+=h*(v/1e3),s.style.top=j+"px"),l=m.time,++y>30&&(r.innerText="Frames: "+y+", time: "+((m.time-a)/1e3).toFixed(2)+" sec., FPS: "+(1e3*y/(m.time-a)).toFixed(2)+"."),[3,2];case 4:return[2]}}))}))}l("#tpl-yielded-run").addEventListener("click",(function(){return p(d,"#tpl-yielded-panel")})),l("#tpl-delay-run").addEventListener("click",(function(){return p(f,"#tpl-delay-panel","#tpl-delay-cancel")})),l("#tpl-sendrequest-run").addEventListener("click",(function(){return p(h,"#tpl-sendrequest-panel","#tpl-sendrequest-cancel")})),l("#tpl-requesticb-run").addEventListener("click",(function(){return p(y,"#tpl-requesticb-panel","#tpl-requesticb-cancel")})),l("#tpl-requestaf-run").addEventListener("click",(function(){return p(m,"#tpl-requestaf-panel","#tpl-requestaf-cancel")})),window.TPL=a}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,